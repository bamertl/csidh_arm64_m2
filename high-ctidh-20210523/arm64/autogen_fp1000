#!/usr/bin/env python3

import os
import math
import re
import sys

limbs = 0
EXTERN_LABELS = {
    'uintbig_p': 'uintbig_p',
    'uintbig_mul3_64': 'uintbig_mul3_64',
    'uintbig_mul3_64_full': 'uintbig_mul3_64_full',
}

data = (
  (1024,
   (3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,983),
  ),
  (2048,
   (3,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,3413),
  )
)

globals = {
    'fp_0': 'fp_0',
    'fp_1': 'fp_1',
    'fp_2': 'fp_2',
    'fp_add2': 'fp_add2',
    'fp_add3': 'fp_add3',
    'fp_addsub_count': 'fp_addsub_count',
    'fp_cmov': 'fp_cmov',
    'fp_copy': 'fp_copy',
    'fp_cswap': 'fp_cswap',
    'fp_mul2': 'fp_mul2',
    'fp_mul3': 'fp_mul3',
    'fp_mulsq_count': 'fp_mulsq_count',
    'fp_sq1': 'fp_sq1',
    'fp_sq2': 'fp_sq2',
    'fp_sq_count': 'fp_sq_count',
    'fp_sub2': 'fp_sub2',
    'fp_sub3': 'fp_sub3',
    'fp_inv': 'fp_inv',
    'fp_sqrt': 'fp_sqrt',
    'uintbig_add2_9_words': '_uintbig_add2_9_words'
    }

sys.setrecursionlimit(10000)


def new_line(f):
  f.write('\n')

def writeconst(f,n,limbs):
  assert n >= 0

  nquad = []
  while n:
    nquad += [n%(1<<64)]
    n >>= 64

  while len(nquad) < limbs:
    nquad += [0]
  assert len(nquad) == limbs

  while len(nquad) > 0:
    nquad4,nquad = nquad[:4],nquad[4:]
    f.write('    .quad %s\n' % ', '.join('%d'%x if x<10 else '0x%016x'%x for x in nquad4))
  new_line(f)

def maybeupdate(fn):
  if os.access(fn,os.F_OK):
    with open(fn) as f:
      x = f.read()
    with open(fn+'.tmp') as f:
      y = f.read()
    if x == y:
      os.unlink(fn+'.tmp')
      return
  os.rename(fn+'.tmp',fn)

def comment(f, comment):
    f.write('/* %s */\n' % comment)

def init_data_var(f, name):
    f.write('.global %s\n' % name)
    f.write('%s: \n' % name)
    f.write('\t.quad 0\n')

def introduce_global_function(f, name):
    f.write('.global %s\n' % name)
    f.write('%s: \n' % name)

def sub_stack_and_store_on_stack(f, regs, additional_offset):
    total_offset = len(regs)*8 + additional_offset 
    if total_offset % 16 != 0:
        total_offset = ((total_offset // 16) + 1) * 16
    f.write('\tsub sp, sp, #%d\n' % total_offset)
    offset = 0
    i = 0
    while i < len(regs):
        # Check if there's at least one more register after the current one
        if i + 1 < len(regs):
            # If yes, store the pair of registers
            f.write('\tstp %s, %s, [sp, #%d]\n' % (regs[i], regs[i+1], offset))
            i += 2
        else:
            # If no, store the single register
            f.write('\tstr %s, [sp, #%d]\n' % (regs[i],offset))
            i += 1
        offset += 16

def add_stack_and_restore_regs_from_stack(f, regs, additional_offset):
    total_offset = len(regs)*8 + additional_offset 
    if total_offset % 16 != 0:
        total_offset = ((total_offset // 16) + 1) * 16
    offset = 0
    i = 0
    while i < len(regs):
        # Check if there's at least one more register after the current one
        if i + 1 < len(regs):
            # If yes, store the pair of registers
            f.write('\tldp %s, %s, [sp, #%d]\n' % (regs[i], regs[i+1], offset))
            i += 2
        else:
            # If no, store the single register
            f.write('\tldr %s, [sp, #%d]\n' % (regs[i],offset))
            i += 1
        offset += 16
    f.write('\tadd sp, sp, #%d\n' % total_offset)

def load_label_address_into_register(f, label, register):
    f.write('\tadrp %s, %s\n' % (register, label+ ' @PAGE'))
    f.write('\tadd %s, %s, %s\n' % (register, register, label+'@PAGEOFF'))

def add_extern_labels(f):
    for label in EXTERN_LABELS.values():
        f.write('.extern %s\n' % label)
    f.write('\n')

def write_constants(f, p, plimbs):
    pmontbits = plimbs * 64
    introduce_global_function(f, globals['fp_0'])
    f.write('\t.zero 64')
    f.write('\n')

    comment(f,'2^%d mod p' % pmontbits)
    introduce_global_function(f, globals['fp_1'])
    writeconst(f,(1<<pmontbits)%p,plimbs)

    comment(f,'2^%d mod p' % (pmontbits+1))
    introduce_global_function(f, globals['fp_2'])
    writeconst(f,(1<<(pmontbits+1))%p,plimbs)

    comment(f,'(2^%d)^2 mod p' % pmontbits)
    f.write('.r_squared_mod_p: /* (2^%d)^2 mod p */\n' % pmontbits)
    writeconst(f,(1<<(2*pmontbits))%p,plimbs)

def write_fp_copy(f, limbs):
    word_offset = 8
    per_batch_words = 8
    half = 4
    comment(f, "[x1] = [x0]  x0 is being copied to x1")
    introduce_global_function(f, globals['fp_copy'])
    num_batches = int(limbs/per_batch_words)
    regs = ['x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10']
    for batch in range(num_batches):
        offset = batch * word_offset * per_batch_words
        for i in range(half):
           mem_offset = offset + i * 16
           f.write('\tldp %s, %s, [x0, #%d]\n' % (regs[i*2], regs[i*2+1], mem_offset))
        for i in range(half):
           mem_offset = offset + i * 16
           f.write('\tstp %s, %s, [x1, #%d]\n' % (regs[i*2], regs[i*2+1], mem_offset))
    f.write('\tret\n\n')

def write_fp_cmov(f, limbs):
    comment(f, "A[x0] = B[x1] if d[x2], we make it time-constant")
    introduce_global_function(f, globals['fp_cmov'])
    comment(f, "(AxorB)^d xor A = A")
    comment(f, "A xor 0 = A")
    comment(f, " d-1 = 1111 or 0000 that why it is like this")
    comment(f, "A xor B and 1 xor B = A")
    comment(f, "A xor B and 0 xor B = B")
    
    A_REGS = ['x3', 'x4', 'x5', 'x6']
    B_REGS = ['x7', 'x8', 'x9', 'x10']
    RESULT_REGS = ['x11', 'x12', 'x13', 'x14']

    d = 'x15'
    word_offset = 8
    per_batch_words = 4
    num_batches = int(limbs / per_batch_words)

    f.write('\tsubs %s, %s, #1\n' % (d,'x2'))

    for batch in range(num_batches):
        comment(f, "Batch %d" % batch)
        offset = batch * word_offset * per_batch_words
        f.write('\tldp %s, %s, [x0, #%d]\n' % (A_REGS[0], A_REGS[1], offset))
        f.write('\tldp %s, %s, [x1, #%d]\n' % (B_REGS[0], B_REGS[1], offset))
        f.write('\tldp %s, %s, [x0, #%d]\n' % (A_REGS[2], A_REGS[3], offset + 16))
        f.write('\tldp %s, %s, [x1, #%d]\n' % (B_REGS[2], B_REGS[3], offset + 16))

        # A xor B
        f.write('\teor %s, %s, %s // A xor B \n' % (RESULT_REGS[0], A_REGS[0], B_REGS[0]))
        f.write('\teor %s, %s, %s\n' % (RESULT_REGS[1], A_REGS[1], B_REGS[1]))
        f.write('\teor %s, %s, %s\n' % (RESULT_REGS[2], A_REGS[2], B_REGS[2]))
        f.write('\teor %s, %s, %s\n' % (RESULT_REGS[3], A_REGS[3], B_REGS[3]))
        new_line(f)
        # A xor B and d
        f.write('\tand %s, %s, %s // A xor B and d \n' % (RESULT_REGS[0], RESULT_REGS[0], d))
        f.write('\tand %s, %s, %s\n' % (RESULT_REGS[1], RESULT_REGS[1], d))
        f.write('\tand %s, %s, %s\n' % (RESULT_REGS[2], RESULT_REGS[2], d))
        f.write('\tand %s, %s, %s\n' % (RESULT_REGS[3], RESULT_REGS[3], d))
        new_line(f)
        # A xor B and d xor B
        f.write('\teor %s, %s, %s // A xor B and d xor B \n' % (RESULT_REGS[0], RESULT_REGS[0], B_REGS[0]))
        f.write('\teor %s, %s, %s\n' % (RESULT_REGS[1], RESULT_REGS[1], B_REGS[1]))
        f.write('\teor %s, %s, %s\n' % (RESULT_REGS[2], RESULT_REGS[2], B_REGS[2]))
        f.write('\teor %s, %s, %s\n' % (RESULT_REGS[3], RESULT_REGS[3], B_REGS[3]))
        new_line(f)
        f.write('\tstp %s, %s, [x0, #%d]\n' % (RESULT_REGS[0], RESULT_REGS[1], offset))
        f.write('\tstp %s, %s, [x0, #%d]\n' % (RESULT_REGS[2], RESULT_REGS[3], offset + 16))

    f.write('\tret \n\n')


fns = ['./arm64/p1024/fp1024_arm64.S', './arm64/p2048/fp2048_arm64.S']
limbs = 0
p = 0
for fn in fns:
    limbs +=16
    p = 4
    if limbs == 16:
        primes = data[0][1]
    else:
        primes = data[1][1]
    for l in primes: p *= l
    p -= 1

    if limbs == 16:
        pbits = 1020
        pbytes = 128
    elif limbs == 32:
        pbits = 2047
        pbytes = 256

    with open(fn+'.tmp','w') as f:
        f.write('/* DO NOT EDIT! generated by autogen */\n\n')
        f.write('#include "uintbig_namespace.h"\n')
        f.write('#include "fp_namespace.h"\n')
        add_extern_labels(f)
        f.write('\n')
        f.write('.set pbits, %d \n' % pbits)
        f.write('.set pbytes, %d \n' % pbytes)
        f.write('.set plimbs, %d \n' % limbs)
        f.write('\n')
        
        write_constants(f, p, limbs)
        
        f.write('.data\n')
        init_data_var(f, globals['fp_mulsq_count'])
        init_data_var(f, globals['fp_sq_count'])
        init_data_var(f, globals['fp_addsub_count'])
        new_line(f)
        f.write('.text\n')
        f.write('.align 4\n')
        new_line(f)

        write_fp_copy(f, limbs)
        write_fp_cmov(f, limbs)
        maybeupdate(fn)