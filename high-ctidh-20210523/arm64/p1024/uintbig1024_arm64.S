/* This file is automatically generated by autogen_uintbig1000.py */
/* DO NOT EDIT! */
/* This file contains functions for 1024-bit unsigned integers */
.global uintbig_1
uintbig_1: 
	.quad 1, 0, 0, 0
	.quad 0, 0, 0, 0
	.quad 0, 0, 0, 0
	.quad 0, 0, 0, 0

.global uintbig_p
uintbig_p: 
    .quad 0xdbe34c5460e36453, 0xa1d81eebbc3d344d, 0x514ba72cb8d89fd3, 0xc2cab6a0e287f1bd
    .quad 0x642aca4d5a313709, 0x6b317c5431541f40, 0xb97c56d1de81ede5, 0x0978dbeed90a2b58
    .quad 0x7611ad4f90441c80, 0xf811d9c419ec8329, 0x4d6c594a8ad82d2d, 0xf06de2471cf9386e
    .quad 0x0683cf25db31ad5b, 0x216c22bc86f21a08, 0xd89dec879007ebd7, 0x0ece55ed427012a9
.global uintbig_four_sqrt_p
uintbig_four_sqrt_p: 
    .quad 0xeba75c5815bb0d57, 0xfec8564a9ae457c6, 0xe362e1c2334bd738, 0x56f74a246ef0a30e
    .quad 0x4a598c9571aeb858, 0xc5617b211ccad355, 0x4fb69e4928ccc442, 0xf643475c7915859c
    .quad 0, 0, 0, 0
    .quad 0, 0, 0, 0
.text
.align 4

/* A[x0][0] = x1, rest 0 */
.global uintbig_set
uintbig_set: 
	stp x1, xzr, [x0, #0]
	stp xzr, xzr, [x0, #16]
	stp xzr, xzr, [x0, #32]
	stp xzr, xzr, [x0, #48]
	stp xzr, xzr, [x0, #64]
	stp xzr, xzr, [x0, #80]
	stp xzr, xzr, [x0, #96]
	stp xzr, xzr, [x0, #112]
	ret

/* Operation: x0 = x0[x1] == 1 */
/* Checks if bit at position x1 is set */
.global uintbig_bit
uintbig_bit: 
	and x2, x1, #0x3F   // x2 = x0 % 64 using bitwise AND
	lsr x1, x1, #6      // x1 = x1 / 64 by right-shifting
	lsl x1, x1, #3      // 8 * (x1 / 64) 
	ldr x3, [x0, x1]    // Load the limb at: x0 + 8 * (k / 64) 
	lsr x3, x3, x2  // Right shift by x0%64 to bring the bit of interest to the least significant position
	and x0, x3, #1  // Check if the least significant bit is set
	ret

/* Operation: A[x0] = B[x1] + C[x2] and x0 = carry */
.global uintbig_add3
uintbig_add3: 

/* load batch 0 */
	ldp x3, x4, [x1, #0]
	ldp x7, x8, [x2, #0]
	ldp x5, x6, [x1, #16]
	ldp x9, x10, [x2, #16]
	adds x11, x3, x7
	adcs x12, x4, x8
	adcs x13, x5, x9
	adcs x14, x6, x10
	stp x11, x12, [x0, #0]
	stp x13, x14, [x0, #16]

/* load batch 1 */
	ldp x3, x4, [x1, #32]
	ldp x7, x8, [x2, #32]
	ldp x5, x6, [x1, #48]
	ldp x9, x10, [x2, #48]
	adcs x11, x3, x7
	adcs x12, x4, x8
	adcs x13, x5, x9
	adcs x14, x6, x10
	stp x11, x12, [x0, #32]
	stp x13, x14, [x0, #48]

/* load batch 2 */
	ldp x3, x4, [x1, #64]
	ldp x7, x8, [x2, #64]
	ldp x5, x6, [x1, #80]
	ldp x9, x10, [x2, #80]
	adcs x11, x3, x7
	adcs x12, x4, x8
	adcs x13, x5, x9
	adcs x14, x6, x10
	stp x11, x12, [x0, #64]
	stp x13, x14, [x0, #80]

/* load batch 3 */
	ldp x3, x4, [x1, #96]
	ldp x7, x8, [x2, #96]
	ldp x5, x6, [x1, #112]
	ldp x9, x10, [x2, #112]
	adcs x11, x3, x7
	adcs x12, x4, x8
	adcs x13, x5, x9
	adcs x14, x6, x10
	stp x11, x12, [x0, #96]
	stp x13, x14, [x0, #112]
/* Final Carry into x0 */
	adc x0, xzr, xzr
	ret

/* Operation: A[x0] = B[x1] - C[x2] and x0 = borrow */
.global uintbig_sub3
uintbig_sub3: 

/* load batch 0 */
	ldp x3, x4, [x1, #0]
	ldp x7, x8, [x2, #0]
	ldp x5, x6, [x1, #16]
	ldp x9, x10, [x2, #16]
	subs x11, x3, x7
	sbcs x12, x4, x8
	sbcs x13, x5, x9
	sbcs x14, x6, x10
	stp x11, x12, [x0, #0]
	stp x13, x14, [x0, #16]

/* load batch 1 */
	ldp x3, x4, [x1, #32]
	ldp x7, x8, [x2, #32]
	ldp x5, x6, [x1, #48]
	ldp x9, x10, [x2, #48]
	sbcs x11, x3, x7
	sbcs x12, x4, x8
	sbcs x13, x5, x9
	sbcs x14, x6, x10
	stp x11, x12, [x0, #32]
	stp x13, x14, [x0, #48]

/* load batch 2 */
	ldp x3, x4, [x1, #64]
	ldp x7, x8, [x2, #64]
	ldp x5, x6, [x1, #80]
	ldp x9, x10, [x2, #80]
	sbcs x11, x3, x7
	sbcs x12, x4, x8
	sbcs x13, x5, x9
	sbcs x14, x6, x10
	stp x11, x12, [x0, #64]
	stp x13, x14, [x0, #80]

/* load batch 3 */
	ldp x3, x4, [x1, #96]
	ldp x7, x8, [x2, #96]
	ldp x5, x6, [x1, #112]
	ldp x9, x10, [x2, #112]
	sbcs x11, x3, x7
	sbcs x12, x4, x8
	sbcs x13, x5, x9
	sbcs x14, x6, x10
	stp x11, x12, [x0, #96]
	stp x13, x14, [x0, #112]
/* Final Carry into x0 */
	sbc x0, xzr, xzr
	ret

/* Operation: A[x0] = B[x1] * C[x2] and C = direct value 64 bit not address */
.global uintbig_mul3_64
uintbig_mul3_64: 
/* 0 Limb */
	ldp x3, x4, [x1, #0]
	mul x5, x3, x2 // low mul
	umulh x6, x3, x2 // high mul
	str x5, [x0, #0]

/* 1 Limb */
	mul x5, x4, x2 // low mul
	adds x5, x5, x6 // add past higher mul
	str x5, [x0, #8]
	umulh x6, x4, x2 // high mul

/* 2 Limb */
	ldp x3, x4, [x1, #16]
	mul x5, x3, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #16]
	umulh x6, x3, x2 // high mul
/* 3 Limb */
	mul x5, x4, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #24]
	umulh x6, x4, x2 // high mul 

/* 4 Limb */
	ldp x3, x4, [x1, #32]
	mul x5, x3, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #32]
	umulh x6, x3, x2 // high mul
/* 5 Limb */
	mul x5, x4, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #40]
	umulh x6, x4, x2 // high mul 

/* 6 Limb */
	ldp x3, x4, [x1, #48]
	mul x5, x3, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #48]
	umulh x6, x3, x2 // high mul
/* 7 Limb */
	mul x5, x4, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #56]
	umulh x6, x4, x2 // high mul 

/* 8 Limb */
	ldp x3, x4, [x1, #64]
	mul x5, x3, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #64]
	umulh x6, x3, x2 // high mul
/* 9 Limb */
	mul x5, x4, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #72]
	umulh x6, x4, x2 // high mul 

/* 10 Limb */
	ldp x3, x4, [x1, #80]
	mul x5, x3, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #80]
	umulh x6, x3, x2 // high mul
/* 11 Limb */
	mul x5, x4, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #88]
	umulh x6, x4, x2 // high mul 

/* 12 Limb */
	ldp x3, x4, [x1, #96]
	mul x5, x3, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #96]
	umulh x6, x3, x2 // high mul
/* 13 Limb */
	mul x5, x4, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #104]
	umulh x6, x4, x2 // high mul 

/* 14 Limb */
	ldp x3, x4, [x1, #112]
	mul x5, x3, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #112]
	umulh x6, x3, x2 // high mul
/* 15 Limb */
	mul x5, x4, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #120]
	umulh x6, x4, x2 // high mul 

	ret

/* Operation: A[x0] = B[x1] * C[x2] and C = direct value 64 bit not address
 results in 9 words */
.global uintbig_mul3_64_full
uintbig_mul3_64_full: 
/* 0 Limb */
	ldp x3, x4, [x1, #0]
	mul x5, x3, x2 // low mul
	umulh x6, x3, x2 // high mul
	str x5, [x0, #0]

/* 1 Limb */
	mul x5, x4, x2 // low mul
	adds x5, x5, x6 // add past higher mul
	str x5, [x0, #8]
	umulh x6, x4, x2 // high mul

/* 2 Limb */
	ldp x3, x4, [x1, #16]
	mul x5, x3, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #16]
	umulh x6, x3, x2 // high mul
/* 3 Limb */
	mul x5, x4, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #24]
	umulh x6, x4, x2 // high mul 

/* 4 Limb */
	ldp x3, x4, [x1, #32]
	mul x5, x3, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #32]
	umulh x6, x3, x2 // high mul
/* 5 Limb */
	mul x5, x4, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #40]
	umulh x6, x4, x2 // high mul 

/* 6 Limb */
	ldp x3, x4, [x1, #48]
	mul x5, x3, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #48]
	umulh x6, x3, x2 // high mul
/* 7 Limb */
	mul x5, x4, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #56]
	umulh x6, x4, x2 // high mul 

/* 8 Limb */
	ldp x3, x4, [x1, #64]
	mul x5, x3, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #64]
	umulh x6, x3, x2 // high mul
/* 9 Limb */
	mul x5, x4, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #72]
	umulh x6, x4, x2 // high mul 

/* 10 Limb */
	ldp x3, x4, [x1, #80]
	mul x5, x3, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #80]
	umulh x6, x3, x2 // high mul
/* 11 Limb */
	mul x5, x4, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #88]
	umulh x6, x4, x2 // high mul 

/* 12 Limb */
	ldp x3, x4, [x1, #96]
	mul x5, x3, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #96]
	umulh x6, x3, x2 // high mul
/* 13 Limb */
	mul x5, x4, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #104]
	umulh x6, x4, x2 // high mul 

/* 14 Limb */
	ldp x3, x4, [x1, #112]
	mul x5, x3, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #112]
	umulh x6, x3, x2 // high mul
/* 15 Limb */
	mul x5, x4, x2 // low mul
	adcs x5, x5, x6 // add past higher mul
	str x5, [x0, #120]
	umulh x6, x4, x2 // high mul 

	adc x6, x6, xzr
	str x6, [x0, #128]
	ret

