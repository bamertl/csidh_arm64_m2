#!/usr/bin/env python3

import os
import math
import re
import sys

limbs = 8
EXTERN_LABELS = {
    'uintbig_p': 'uintbig_p',
    'uintbig_mul3_64': 'uintbig_mul3_64',
    'uintbig_mul3_64_full': 'uintbig_mul3_64_full',
}

globals = {
    'fp_0': 'fp_0',
    'fp_1': 'fp_1',
    'fp_2': 'fp_2',
    'fp_add2': 'fp_add2',
    'fp_add3': 'fp_add3',
    'fp_addsub_count': 'fp_addsub_count',
    'fp_inv_count': 'fp_inv_count',
    'fp_cmov': 'fp_cmov',
    'fp_copy': 'fp_copy',
    'fp_cswap': 'fp_cswap',
    'fp_mul2': 'fp_mul2',
    'fp_mul3': 'fp_mul3',
    'fp_mulsq_count': 'fp_mulsq_count',
    'fp_sq1': 'fp_sq1',
    'fp_sq2': 'fp_sq2',
    'fp_sq_count': 'fp_sq_count',
    'fp_sub2': 'fp_sub2',
    'fp_sub3': 'fp_sub3',
    'fp_inv': 'fp_inv',
    'fp_sqrt': 'fp_sqrt',
    'uintbig_add2_9_words': '_uintbig_add2_9_words'
    }

sys.setrecursionlimit(10000)


def maybeupdate(fn):
  if os.access(fn,os.F_OK):
    with open(fn) as f:
      x = f.read()
    with open(fn+'.tmp') as f:
      y = f.read()
    if x == y:
      os.unlink(fn+'.tmp')
      return
  os.rename(fn+'.tmp',fn)

def comment(f, comment):
    f.write('/* %s */\n' % comment)

def init_data_var(f, name):
    f.write('.global %s\n' % name)
    f.write('%s: \n' % name)
    f.write('\t.quad 0\n')

def introduce_global_function(f, name):
    f.write('.global %s\n' % name)
    f.write('%s: \n' % name)

def sub_stack_and_store_on_stack(f, regs, additional_offset):
    total_offset = len(regs)*8 + additional_offset 
    if total_offset % 16 != 0:
        total_offset = ((total_offset // 16) + 1) * 16
    f.write('\tsub sp, sp, #%d\n' % total_offset)
    offset = 0
    i = 0
    while i < len(regs):
        # Check if there's at least one more register after the current one
        if i + 1 < len(regs):
            # If yes, store the pair of registers
            f.write('\tstp %s, %s, [sp, #%d]\n' % (regs[i], regs[i+1], offset))
            i += 2
        else:
            # If no, store the single register
            f.write('\tstr %s, [sp, #%d]\n' % (regs[i],offset))
            i += 1
        offset += 16

def add_stack_and_restore_regs_from_stack(f, regs, additional_offset):
    total_offset = len(regs)*8 + additional_offset 
    if total_offset % 16 != 0:
        total_offset = ((total_offset // 16) + 1) * 16
    offset = 0
    i = 0
    while i < len(regs):
        # Check if there's at least one more register after the current one
        if i + 1 < len(regs):
            # If yes, store the pair of registers
            f.write('\tldp %s, %s, [sp, #%d]\n' % (regs[i], regs[i+1], offset))
            i += 2
        else:
            # If no, store the single register
            f.write('\tldr %s, [sp, #%d]\n' % (regs[i],offset))
            i += 1
        offset += 16
    f.write('\tadd sp, sp, #%d\n' % total_offset)

def load_label_address_into_register(f, label, register):
    f.write('\tadrp %s, %s\n' % (register, label+ ' @PAGE'))
    f.write('\tadd %s, %s, %s\n' % (register, register, label+'@PAGEOFF'))

def add_extern_labels(f):
    for label in EXTERN_LABELS.values():
        f.write('.extern %s\n' % label)
    f.write('\n')

def write_uintbig_add2_9_words(f):
    comment(f, "A[x0] = A[x0] + B[x1]")
    introduce_global_function(f, globals['uintbig_add2_9_words'])
    REGS_TO_STORE = ["x19", "x20", "x21", "x22"]
    sub_stack_and_store_on_stack(f, REGS_TO_STORE, 0)
    RESULT_ADR = 'x0'
    A_ADR = 'x0'
    B_ADR = 'x1'
    A_REGS = ['x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9','x10', 'x11', 'x12'] # 9 + 1 words
    B_REGS = ['x13', 'x14', 'x15', 'x16', 'x17', 'x19', 'x20', 'x21', 'x22'] # 9 words
    comment(f, 'Load A')
    for i in range(int(limbs/2)):
        f.write('\tldp %s, %s, [%s, #%d]\n' % (A_REGS[i*2], A_REGS[i*2+1], A_ADR, i*16))
    f.write('\tldr %s, [%s, #%d]\n' % (A_REGS[8],A_ADR, 8*8))
    comment(f, 'Load B')
    for i in range(int(limbs/2)):
        f.write('\tldp %s, %s, [%s, #%d]\n' % (B_REGS[i*2], B_REGS[i*2+1], B_ADR, i*16))
    f.write('\tldr %s, [%s, #%d]\n\n' % (B_REGS[8],B_ADR, 8*8))
    
    f.write('\tadds %s, %s, %s\n' % (A_REGS[0], A_REGS[0], B_REGS[0]))
    for i in range(1,9):
        f.write('\tadcs %s, %s, %s\n' % (A_REGS[i], A_REGS[i], B_REGS[i]))
    f.write('\tadcs %s, xzr, xzr // carry into 10th word\n' % A_REGS[9])

    comment(f, 'Store Result 10 words')
    for i in range(5):
       f.write('\tstp %s, %s, [%s, #%d]\n' % (A_REGS[i*2], A_REGS[i*2+1], RESULT_ADR, i*16)) 
    
    add_stack_and_restore_regs_from_stack(f, REGS_TO_STORE, 0)
    f.write('\tret \n\n')


def write_radix_monte_mul(f):
    c_addr = 64
    temp_addr = 144
    comment(f, "A[x0] = A[x0] * B[x1] mod P \n directly into fp_mul3")
    introduce_global_function(f, globals['fp_mul2'])
    f.write('\tmov x2, x0\n') 
    comment(f, "Montgomery multiplication\n C[x0] = A[x1] * B[x2] mod P")
    introduce_global_function(f, globals['fp_mul3'])
    comment(f, "Increment mul/sq counter")
    load_label_address_into_register(f, globals['fp_mulsq_count'], 'x3')
    f.write('\tldr x4, [x3]\n')
    f.write('\tadd x4, x4, #1\n')
    f.write('\tstr x4, [x3]\n\n')
    result_addr = 8
    a_addr = 16
    b_addr = 24
    STORE_REGS = ["lr", "x0", "x1", "x2", "x19", "x20", "x21"]
    sub_stack_and_store_on_stack(f, STORE_REGS, 2*(64+16) + 16)
    comment(f, "Init C and Temp with 0")
    for i in range(int(limbs/2) + 1):
        offset = i * 16 + c_addr
        f.write('\tstp xzr, xzr, [sp, #%d]\n' % (offset))
    for i in range(int(limbs/2) + 1):
        offset = i * 16 + temp_addr
        f.write('\tstp xzr, xzr, [sp, #%d]\n' % (offset))
    f.write('\n')

    comment(f, "Counter = x5, Offset = x6")
    counter_reg = 'x5'
    offset_reg = 'x6'
    counter_adr = temp_addr + 8*10
    offset_adr = counter_adr + 8
    f.write('\tmov %s, #0\n' % counter_reg)
    f.write('\tmov %s, #0\n' % offset_reg)
    f.write('\tstr %s, [sp, #%d]\n' % (counter_reg, counter_adr))
    f.write('\tstr %s, [sp, #%d]\n' % (offset_reg, offset_adr))
    f.write('\n')
    ## MUL LOOP
    f.write('_fp_mul_loop:\n')
    comment(f, 'C <- C + a[i] * B')
    f.write('\tldr x2, [sp, #%d] // load a_adr \n' % (a_addr))
    f.write('\tadd x2, x2, x6 // add offset to a_adr\n')
    f.write('\tldr x2, [x2] // load actual value of a[i]\n')
    f.write('\tldr x1, [sp, #%d] // load b_adr \n' % (b_addr))
    f.write('\tadd x0, sp, #%d // load temp_addr \n' % (temp_addr))
    comment(f, 'temp = A[i] * B' )
    f.write('\tbl %s \n' % EXTERN_LABELS['uintbig_mul3_64_full'])
    
    comment(f, 'C = C + temp')
    f.write('\tmov x1, x0 // move temp_addr into x1 \n')
    f.write('\tadd x0, sp, #%d // load c_addr \n' % (c_addr))
    f.write('\tbl %s // c = c + temp \n\n' % globals['uintbig_add2_9_words'])

    comment(f, 'q = C * mu mod r')
    load_label_address_into_register(f, EXTERN_LABELS['inv_min_p_mod_r'], 'x1')
    f.write('\tldr x0, [x0] // load first value of c \n')
    f.write('\tldr x1, [x1] // load firsinv_min_p_mod_t value of mu \n')
    f.write('\tmul x2, x0, x1 // q = c * mu % r // mod r means we only care about the first word \n\n')

    comment(f, '3. C ← (C + p*q) /r')
    f.write('\tadd x0, sp, #%d // load temp_addr \n' % (temp_addr))
    load_label_address_into_register(f, EXTERN_LABELS['uintbig_p'], 'x1')
    f.write('\tbl %s // temp = q*p \n\n' % EXTERN_LABELS['uintbig_mul3_64_full'])

    comment(f, 'temp <- C + temp /r')
    f.write('\tadd x0, sp, #%d // load temp_addr \n' % (temp_addr)) 
    f.write('\tadd x1, sp, #%d // load c_addr \n' % (c_addr))
    comment(f, 'add together')
    f.write('\tbl %s // c = c + q*p \n' % globals['uintbig_add2_9_words'])
    comment(f, '4. C ← C/r')
    for i in range(int(limbs/2)):
        offset_temp = i*16 + 8 + temp_addr # we do / by leaving out the first word
        offset_c = i*16 + c_addr
        f.write('\tldp x0, x1, [sp, #%d] // load temp_addr \n' % (offset_temp))
        f.write('\tstp x0, x1, [sp, #%d] // store into c_addr \n' % (offset_c))
    f.write('\tstr xzr, [sp, #%d] // store into c_addr \n' % (c_addr + 8*8))
    comment(f, '5. i ← i + 1')
    f.write('\tldr %s, [sp, #%d] // load counter \n' % (counter_reg, counter_adr))
    f.write('\tldr %s, [sp, #%d] // load offset \n' % (offset_reg, offset_adr))
    f.write('\tadd %s, %s, #1 // increment counter \n' % (counter_reg, counter_reg))
    f.write('\tadd %s, %s, #8 // increment offset \n' % (offset_reg, offset_reg))
    f.write('\tstp %s, %s, [sp, #%d] // store counter \n' % (counter_reg, offset_reg, counter_adr))
    comment(f, '6. if i < 8 goto loop again')
    f.write('\tcmp %s, #8\n' % counter_reg)
    f.write('\tb.lt _fp_mul_loop\n')
    ## Finish loop
    comment(f, 'if C >= p then C = C - p')
    C_REGS = ['x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9','x10', 'x11'] # 9 words
    P_REGS = ['x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x19', 'x20'] # 8 words
    for i in range(int(limbs/2)):
        offset = i*16 + c_addr
        f.write('\tldp %s, %s, [sp, #%d]\n' % (C_REGS[i*2], C_REGS[i*2+1], offset))
    f.write('\tldr %s, [sp, #%d]\n' % (C_REGS[8], c_addr + 8*8))
    load_label_address_into_register(f, EXTERN_LABELS['uintbig_p'], 'x0')
    comment(f,'load p')
    for i in range(int(limbs/2)):
        offset = i*16
        f.write('\tldp %s, %s, [x0, #%d]\n' % (P_REGS[i*2], P_REGS[i*2+1], offset))
    comment(f,'C - P')
    f.write('\tsubs %s, %s, %s\n' % (C_REGS[0], C_REGS[0], P_REGS[0]))
    for i in range(1, limbs):
        f.write('\tsbcs %s, %s, %s\n' % (C_REGS[i], C_REGS[i], P_REGS[i]))
    CARRY_REG = 'x21'
    f.write('\tsbc %s, xzr, xzr\n' % CARRY_REG)
    comment(f,'and with carry')
    for i in range(limbs):
        offset = i*8
        f.write('\tand %s, %s, %s\n' % (P_REGS[i], P_REGS[i], CARRY_REG))
    comment(f, 'C + P')
    f.write('\tadds %s, %s, %s\n' % (C_REGS[0], C_REGS[0], P_REGS[0]))
    for i in range(1, limbs):
        f.write('\tadcs %s, %s, %s\n' % (C_REGS[i], C_REGS[i], P_REGS[i]))
    comment(f, 'store C into result address')
    f.write('\tldr x0, [sp, #%d]\n' % (result_addr))

    for i in range(int(limbs/2)):
        offset = i*16
        f.write('\tstp %s, %s, [x0, #%d]\n' % (C_REGS[i*2], C_REGS[i*2+1], offset))
    
    add_stack_and_restore_regs_from_stack(f, STORE_REGS, 2*(64+16) + 16)
    f.write('\tret\n\n')


fn = './fp512_arm64.S'
with open(fn+'.tmp','w') as f:
    f.write('/* DO NOT EDIT! generated by autogen */\n\n')
    f.write('#include "uintbig_namespace.h"\n')
    f.write('#include "fp_namespace.h"\n')
    add_extern_labels(f)
    f.write('\n')
    f.write('.set pbits,511 \n')
    f.write('.set pbytes,64 \n')
    f.write('.set plimbs,8 \n')
    f.write('\n')

    #f.write('inv_min_p_mod_r: \n')
    #f.write('\t.quad 0x66c1301f632e294d\n')
    f.write('\n')

    introduce_global_function(f, globals['fp_0'])
    f.write('\t.zero 64')
    f.write('\n')

    introduce_global_function(f, globals['fp_1'])
    f.write('\t.quad 0xc8fc8df598726f0a, 0x7b1bc81750a6af95, 0x5d319e67c1e961b4, 0xb0aa7275301955f1\n')
    f.write('\t.quad 0x4a080672d9ba6c64, 0x97a5ef8a246ee77b, 0x06ea9e5d4383676a, 0x3496e2e117e0ec80\n')
    f.write('\n')

    introduce_global_function(f, globals['fp_2'])
    f.write('\t.quad 0x767762e5fd1e1599, 0x33c5743a49a0b6f6, 0x68fc0c0364c77443, 0xb9aa1e24f83f56db\n')
    f.write('\t.quad 0x3914101f20520efb, 0x7b1ed6d95b1542b4, 0x114a8be928c8828a, 0x03793732bbb24f40\n')
    f.write('\n')

    f.write('_r_squared_mod_p:\n')
    f.write('\t.quad 0x36905b572ffc1724, 0x67086f4525f1f27d, 0x4faf3fbfd22370ca, 0x192ea214bcc584b1\n')
    f.write('\t.quad 0x5dae03ee2f5de3d0, 0x1e9248731776b371, 0xad5f166e20e4f52d, 0x4ed759aea6f3917e\n')
    f.write('\n')

    # Data section
    f.write('.data\n')
    init_data_var(f, globals['fp_mulsq_count'])
    init_data_var(f, globals['fp_sq_count'])
    init_data_var(f, globals['fp_addsub_count'])
    init_data_var(f, globals['fp_inv_count'])
    f.write('\n')
    
    # Text section
    f.write('.text\n')
    f.write('.align 4\n')
    comment(f, "this means 16 byte alignment")
    f.write('\n')

    # _FP_COPY
    comment(f, "x1 = x0  x0 is being copied to x1(8 words)")
    introduce_global_function(f, globals['fp_copy'])
    for i in range(int(limbs/2)):
        memory_offset = i*16
        f.write('\tldp x2, x3, [x1, #%d]\n' % memory_offset)
        f.write('\tstp x2, x3, [x0, #%d]\n' % memory_offset)
    f.write("\tret\n") 
    f.write('\n')

    # _FP_CMOV
    comment(f, "A[x0] = B[x1] if d[x2], we make it time-constant")
    introduce_global_function(f, globals['fp_cmov'])
    comment(f, "Loop 4 times through the 8 words")
    comment(f, "(AxorB)^d xor A = A")
    comment(f, "A xor 0 = A")
    comment(f, " d-1 = 1111 or 0000 that why it is like this")
    comment(f, "A xor B and 1 xor B = A")
    comment(f, "A xor B and 0 xor B = B")
    for i in range(int(limbs/2)):
        memory_offset = i*16
        comment(f, "LOOP %d" % i)
        f.write('\tsubs x7, x2, #1\n')
        f.write('\tldp x3, x4, [x0, #%d] // load A\n' % memory_offset)
        f.write('\tldp x5, x6, [x1, #%d] // load B\n' % (memory_offset))
        f.write('\teor x3, x3, x5 // A xor B\n')
        f.write('\teor x4, x4, x6 \n')
        f.write('\tand x3, x3, x7 // A xor B and d\n')
        f.write('\tand x4, x4, x7\n')
        f.write('\teor x3, x3, x5 // A xor B and d xor B\n')
        f.write('\teor x4, x4, x6\n')
        f.write('\tstp x3, x4, [x0, #%d]\n' % (memory_offset))
    f.write("\tret\n") 
    f.write('\n')

    # _FP_CSWAP _____________________________________________________________________________________
    comment(f, "A[x0] <-> B[x1] if d[x2], we make it time-constant")
    # A xor A = 0
    # A xor 0 = A
    # x2 -1 = 1->0 and 0 -> 111111
    # (A xor B ) and 1 xor B = A
    # (A xor B ) and x2=0 xor B = A into A
    # (A xor B ) and x2=0 xor A = B into B

    # (A xor B ) and 0 xor A = A
    introduce_global_function(f, globals['fp_cswap'])
    for i in range(int(limbs/2)):
        comment(f, "LOOP %d" % i)
        memory_offset = i*16
        f.write('\tsubs x9, x2, #1\n')
        f.write('\tldp x3, x4, [x0, #%d]\n' % memory_offset)
        f.write('\tldp x5, x6, [x1, #%d]\n' % (memory_offset))
        f.write('\teor x7, x3, x5 // x7,8 = A xor B\n')
        f.write('\teor x8, x4, x6\n')

        f.write('\tand x7, x7, x9\n')
        f.write('\tand x8, x8, x9\n')

        f.write('\teor x3, x7, x3 // A xor B xor d xor A -> into B\n')
        f.write('\teor x4, x8, x4\n')
        f.write('\teor x5, x7, x5\n')
        f.write('\teor x6, x8, x6\n')

        f.write('\tstp x3, x4, [x1, #%d]\n' % (memory_offset))
        f.write('\tstp x5, x6, [x0, #%d]\n' % (memory_offset))	
    f.write("\tret\n") 
    f.write('\n')
    #_FP_ADD2, just straight to _fp_add3 _____________________________________________________________________________________
    comment(f, "A[x0] = A[x0] + B[x1]")
    introduce_global_function(f, globals['fp_add2'])
    f.write('\tmov x2, x0\n')
    #_FP_ADD3 _____________________________________________________________________________________
    comment(f, "A[x0] = B[x1] + C[x2]")
    introduce_global_function(f, globals['fp_add3'])
    comment(f, "Increment add/sub counter")
    load_label_address_into_register(f, globals['fp_addsub_count'], 'x3')
    f.write('\tldr x4, [x3]\n')
    f.write('\tadd x4, x4, #1\n')
    f.write('\tstr x4, [x3]\n\n')

    comment(f, "LOAD A")
    REGS_TO_STORE = ["x19", "x20", "x21"]
    A_REGS = ['x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9','x10']
    B_REGS = ['x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x19','x20']
    P_REGS = ['x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x19', 'x20']

    sub_stack_and_store_on_stack(f, REGS_TO_STORE, 0)

    comment(f, "load A and B")
    for i in range(int(limbs/2)):
        f.write("\tldp %s, %s, [x1, #%d]\n" % (A_REGS[i*2], A_REGS[i*2+1], i*16))
    for i in range(int(limbs/2)):
        f.write("\tldp %s, %s, [x2, #%d]\n" % (B_REGS[i*2], B_REGS[i*2+1], i*16))
    comment(f, "A + B")    
    f.write("\tADDS %s, %s, %s\n" % (A_REGS[0], A_REGS[0], B_REGS[0]))
    for i in range(1, limbs):
        f.write("\tADCS %s, %s, %s\n" % (A_REGS[i], A_REGS[i], B_REGS[i]))
    #Carry into x11
    f.write("\tADCS x11, xzr, xzr\n")
    comment(f, "LOAD P")
    load_label_address_into_register(f, EXTERN_LABELS['uintbig_p'], 'x21')
    for i in range(int(limbs/2)):
        f.write("\tldp %s, %s, [x21, #%d]\n" % (P_REGS[i*2], P_REGS[i*2+1], i*16))
    comment(f, "A + B - P")
    f.write("\tSUBS %s, %s, %s\n" % (A_REGS[0], A_REGS[0], P_REGS[0]))
    for i in range(1, limbs):
        f.write("\tSBCS %s, %s, %s\n" % (A_REGS[i], A_REGS[i], P_REGS[i]))
    f.write("\tSBCS x11, x11, xzr\n")
    f.write("\tSBCS x21, xzr, xzr\n")
    comment(f, "Carry into x21") 

    comment(f, "MASK P with carry")
    for i in range(int(limbs)):
        f.write("\tAND %s, %s, x21\n" % (P_REGS[i], P_REGS[i]))
    
    comment(f, "A + B - P + P")
    f.write("\tADDS %s, %s, %s\n" % (A_REGS[0], A_REGS[0], P_REGS[0]))
    for i in range(1, limbs):
        f.write("\tADCS %s, %s, %s\n" % (A_REGS[i], A_REGS[i], P_REGS[i]))
    comment(f, "STORE RESULT")
    for i in range(int(limbs/2)):
       memory_offest = i*16
       f.write("\tstp %s, %s, [x0, #%d]\n" % (A_REGS[i*2], A_REGS[i*2+1], memory_offest))

    add_stack_and_restore_regs_from_stack(f, REGS_TO_STORE, 0)
    f.write("\tret\n\n")

    #_FP_SUB2, just straight to _fp_sub3 _____________________________________________________________________________________
    comment(f, "A[x0] = A[x0] - B[x1]")
    introduce_global_function(f, globals['fp_sub2'])
    f.write('\tmov x2, x1\n')
    f.write('\tmov x1, x0\n')
    #_FP_SUB3
    comment(f, "A[x0] = A[x0] - B[x1] - C[x2]")
    introduce_global_function(f, globals['fp_sub3'])
    REGS_TO_STORE = ["lr", "x19", "x20", "x21"]
    sub_stack_and_store_on_stack(f, REGS_TO_STORE, 64)
    comment(f, "Increment add/sub counter")
    load_label_address_into_register(f, globals['fp_addsub_count'], 'x3')
    f.write('\tldr x4, [x3]\n')
    f.write('\tadd x4, x4, #1\n')
    f.write('\tstr x4, [x3]\n\n')
    f.write('\tmov x19, x0\n')
    f.write('\tmov x20, x1\n')
    comment(f, 'stack + 32 = -x2')
    f.write('\tmov x1, x2\n')
    f.write('\tadd x0, sp, #32\n')
    f.write('\tbl _minus_number\n')
    f.write('\tmov x2, x0\n')
    f.write('\tmov x0, x19\n')
    f.write('\tmov x1, x20\n')
    f.write('\tbl %s\n' % globals['fp_add3'])

    add_stack_and_restore_regs_from_stack(f, REGS_TO_STORE, 64) 
    f.write('\tret\n\n')

    ## _MINUS_NUMBER ______________________________________________________________________________________________
    comment(f, "x0 = -x1") 
    f.write('_minus_number: \n')
    REGS_TO_STORE = ["x19", "x20"]
    sub_stack_and_store_on_stack(f, REGS_TO_STORE, 0)
    A_REGS = ['x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9','x10']
    P_REGS = ['x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17','x19']
    comment(f, "LOAD A and P")
    load_label_address_into_register(f, EXTERN_LABELS['uintbig_p'], 'x2')
    for i in range(int(limbs/2)):
        f.write("\tldp %s, %s, [x1, #%d]\n" % (A_REGS[i*2], A_REGS[i*2+1], i*16))
    for i in range(int(limbs/2)):
        f.write("\tldp %s, %s, [x2, #%d]\n" % (P_REGS[i*2], P_REGS[i*2+1], i*16))
    comment(f, "P - A")
    f.write('\tsubs %s, %s, %s\n' % (A_REGS[0], P_REGS[0], A_REGS[0]))
    for i in range(1, limbs):
        f.write('\tsbcs %s, %s, %s\n' % (A_REGS[i], P_REGS[i], A_REGS[i]))
    comment(f, "check if a = 0 by orr x3-x10 ")
    f.write('\torr x20, x3, x4\n') 
    for i in range(2, limbs):
        f.write('\torr x20, x20, %s\n' % A_REGS[i])
    f.write('\tcmp x20, #0\n')
    f.write('\tcset x20, eq\n')
    f.write('\tlsl x20, x20, #63\n')
    f.write('\tasr x20, x20, #63\n')

    comment(f, 'and the prime (if a was 0 then we and with 1, otherwise 0)')
    for i in range(limbs):
        f.write('\tand %s, %s, x20\n' % (P_REGS[i], P_REGS[i])) 
    comment(f, "subtract the prime from the result (this should only happen if result = prime)")
    f.write('\tsubs %s, %s, %s\n' % (A_REGS[0], A_REGS[0], P_REGS[0]))
    for i in range(1, limbs):
        f.write('\tsbcs %s, %s, %s\n' % (A_REGS[i], A_REGS[i], P_REGS[i]))
    for i in range(int(limbs/2)):
        offset = i*16
        f.write('\tstp %s, %s, [x0, #%d]\n' % (A_REGS[i*2], A_REGS[i*2+1], offset))
    add_stack_and_restore_regs_from_stack(f, REGS_TO_STORE, 0)
    f.write('\tret\n\n') 

    #UINT_ADD_2_9_WORDS this is added from csidh
    write_uintbig_add2_9_words(f)
    #MONTE MULTIPLICATION fp_mul2, fp_mul3 _____________________________________________________________________
    #write_radix_monte_mul(f)

    #FP_SQ1 _____________________________________________________________________________________
    comment(f, 'x0 = x0^2, straight to fp_sq2')
    introduce_global_function(f, globals['fp_sq1'])
    f.write('\tmov x1, x0\n')
    comment(f, 'x0 = x1^2 mod p')
    introduce_global_function(f, globals['fp_sq2'])
    comment(f, 'Increment sq counter')
    load_label_address_into_register(f, globals['fp_sq_count'], 'x3')
    f.write('\tldr x4, [x3]\n')
    f.write('\tadd x4, x4, #1\n')
    f.write('\tstr x4, [x3]\n\n')
    f.write('\tmov x2, x1\n')
    f.write('\tb %s\n' % (globals['fp_mul3']))
    maybeupdate(fn)