#!/usr/bin/env python3

import os
import math
import re
import sys

limbs = 8

sys.setrecursionlimit(10000)

print("Generating fp512_arm.S this is fancy...")

def maybeupdate(fn):
  if os.access(fn,os.F_OK):
    with open(fn) as f:
      x = f.read()
    with open(fn+'.tmp') as f:
      y = f.read()
    if x == y:
      os.unlink(fn+'.tmp')
      return
  os.rename(fn+'.tmp',fn)

def comment(f, comment):
    f.write('/* %s */\n' % comment)

def init_data_var(f, name):
    f.write('.global %s\n' % name)
    f.write('%s: \n' % name)
    f.write('\t.quad 0\n')

def introduce_global_function(f, name):
    f.write('.global %s\n' % name)
    f.write('%s: \n' % name)



fn = '../fp512_arm64s.S'
with open(fn+'.tmp','w') as f:
    f.write('/* DO NOT EDIT! generated by chucky the norris */\n\n')
    f.write('#include "uintbig_namespace.h"\n')
    f.write('#include "fp_namespace.h"\n')

    f.write('\n')
    f.write('.set pbits,511 \n')
    f.write('.set pbytes,64 \n')
    f.write('.set plimbs,8 \n')
    f.write('\n')

    f.write('_inv_min_p_mod_r: \n')
    f.write('\t.quad 0x66c1301f632e294d\n')
    f.write('\n')

    introduce_global_function(f, '_fp_0')
    f.write('\t.zero 64')
    f.write('\n')

    introduce_global_function(f, '_fp_1')
    f.write('\t.quad 0xc8fc8df598726f0a, 0x7b1bc81750a6af95, 0x5d319e67c1e961b4, 0xb0aa7275301955f1\n')
    f.write('\t.quad 0x4a080672d9ba6c64, 0x97a5ef8a246ee77b, 0x06ea9e5d4383676a, 0x3496e2e117e0ec80\n')
    f.write('\n')

    introduce_global_function(f, '_fp_2')
    f.write('\t.quad 0x767762e5fd1e1599, 0x33c5743a49a0b6f6, 0x68fc0c0364c77443, 0xb9aa1e24f83f56db\n')
    f.write('\t.quad 0x3914101f20520efb, 0x7b1ed6d95b1542b4, 0x114a8be928c8828a, 0x03793732bbb24f40\n')
    f.write('\n')

    f.write('_r_squared_mod_p:\n')
    f.write('\t.quad 0x36905b572ffc1724, 0x67086f4525f1f27d, 0x4faf3fbfd22370ca, 0x192ea214bcc584b1\n')
    f.write('\t.quad 0x5dae03ee2f5de3d0, 0x1e9248731776b371, 0xad5f166e20e4f52d, 0x4ed759aea6f3917e\n')
    f.write('\n')

    # Data section
    f.write('.data\n')
    init_data_var(f, '_fp_mulsq_count')
    init_data_var(f, '_fp_sqr_count')
    init_data_var(f, '_fp_addsub_count')
    f.write('\n')
    
    # Text section
    f.write('.text\n')
    f.write('.align 4\n')
    comment(f, "this means 16 byte alignment")
    f.write('\n')

    comment(f, "x0 = x1 (8 words)")
    introduce_global_function(f, '_fp_copy')
    for i in range(int(limbs/2)):
        memory_offset = i*16
        f.write('\tldp x2, x3, [x1, #%d]\n' % memory_offset)
        f.write('\tstp x2, x3, [x0, #%d]\n' % memory_offset)




    maybeupdate(fn)