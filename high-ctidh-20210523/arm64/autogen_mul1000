#!/usr/bin/env python3

import os
import sys

extern_variables = {
    'uintbig_p': 'uintbig_p',
    'fp_mulsq_count': 'fp_mulsq_count'
                          }


sys.setrecursionlimit(10000)


def maybeupdate(fn):
  if os.access(fn,os.F_OK):
    with open(fn) as f:
      x = f.read()
    with open(fn+'.tmp') as f:
      y = f.read()
    if x == y:
      os.unlink(fn+'.tmp')
      return
  os.rename(fn+'.tmp',fn)

def comment(f, comment):
    f.write('/* %s */\n' % comment)

def init_data_var(f, name):
    f.write('.global %s\n' % name)
    f.write('%s: \n' % name)
    f.write('\t.quad 0\n')

def introduce_global_function(f, name, comment=''):
    if comment:
        f.write('/*\n %s  \n*/\n' % comment)
    f.write('.global %s\n' % name)
    f.write('%s: \n' % name)


def sub_stack_and_store_on_stack(f, regs, additional_offset):
    total_offset = len(regs)*8 + additional_offset 
    if total_offset % 16 != 0:
        total_offset = ((total_offset // 16) + 1) * 16
    f.write('\tsub sp, sp, #%d\n' % total_offset)
    offset = 0
    i = 0
    while i < len(regs):
        # Check if there's at least one more register after the current one
        if i + 1 < len(regs):
            # If yes, store the pair of registers
            f.write('\tstp %s, %s, [sp, #%d]\n' % (regs[i], regs[i+1], offset))
            i += 2
        else:
            # If no, store the single register
            f.write('\tstr %s, [sp, #%d]\n' % (regs[i],offset))
            i += 1
        offset += 16

def add_stack_and_restore_regs_from_stack(f, regs, additional_offset):
    total_offset = len(regs)*8 + additional_offset 
    if total_offset % 16 != 0:
        total_offset = ((total_offset // 16) + 1) * 16
    offset = 0
    i = 0
    while i < len(regs):
        # Check if there's at least one more register after the current one
        if i + 1 < len(regs):
            # If yes, store the pair of registers
            f.write('\tldp %s, %s, [sp, #%d]\n' % (regs[i], regs[i+1], offset))
            i += 2
        else:
            # If no, store the single register
            f.write('\tldr %s, [sp, #%d]\n' % (regs[i],offset))
            i += 1
        offset += 16
    f.write('\tadd sp, sp, #%d\n' % total_offset)

def load_label_address_into_register(f, label, register):
    f.write('\tadrp %s, %s\n' % (register, label+ '@PAGE'))
    f.write('\tadd %s, %s, %s\n' % (register, register, label+'@PAGEOFF'))


def mov(f, dst, src, comment=''):
    if comment:
        comment = ' // ' + comment

    f.write('\tmov %s, %s %s \n' % (dst, src, comment))

def comment(f, comment):
    f.write('\t/* %s */\n' % comment)

def eor(f, dst, who, who2, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\teor %s, %s, %s %s \n' % (dst, who, who2, comment)) 

def orr(f, dst, who, who2, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\torr %s, %s, %s %s \n' % (dst, who, who2, comment))
    
def newlines(f, n=1):
    for i in range(n):
        f.write('\n')

def ldr(f, dst, src, offset, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\tldr %s, [%s, #%d] %s \n' % (dst, src, offset, comment))

def ldp(f, dst, dst2, src, offset, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\tldp %s, %s, [%s, #%d] %s \n' % (dst, dst2, src, offset, comment))
def mul(f, dst, src, src2, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\tmul %s, %s, %s %s \n' % (dst, src, src2, comment))

def umulh(f, dst, src, src2, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\tumulh %s, %s, %s %s \n' % (dst, src, src2, comment))

def adds(f, dst, src, src2, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\tadds %s, %s, %s %s \n' % (dst, src, src2, comment))

def add(f, dst, src, src2, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\tadd %s, %s, %s %s \n' % (dst, src, src2, comment))

def adcs(f, dst, src, src2, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\tadcs %s, %s, %s %s \n' % (dst, src, src2, comment))

def subs(f, dst, src, src2, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\tsubs %s, %s, %s %s \n' % (dst, src, src2, comment))

def sbcs(f, dst, src, src2, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\tsbcs %s, %s, %s %s \n' % (dst, src, src2, comment))

def andd(f, dst, src, src2, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\tand %s, %s, %s %s \n' % (dst, src, src2, comment))

def lsr(f, dst, src, src2, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\tlsr %s, %s, %s %s \n' % (dst, src, src2, comment))

def lsl(f, dst, src, src2, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\tlsl %s, %s, %s %s \n' % (dst, src, src2, comment))

def stp(f, src, src2, dst, offset, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\tstp %s, %s, [%s, #%d] %s \n' % (src, src2, dst, offset, comment))

def strr(f, src, dst, offset, comment=''):
    if comment:
        comment = ' // ' + comment
    f.write('\tstr %s, [%s, #%d] %s \n' % (src, dst, offset, comment))

def import_extern_variables(f):
    for var in extern_variables:
        f.write('.extern %s\n' % var)
    newlines(f,1)

MULLIMBSx1 = 'MUL_LIMBSx1'

# 17 Regs for C

C_ADR_REAL = "x3"
AI_REAL = "x4"
A_ADR_REAL = "x1"
B_ADR_REAL = "x2"
P_ADR_REAL = "x6"
C_REAL = ["x7", "x8", "x9", "x10"]
T_REAL = ["x12","x13","x14", "x15", "x16", "x17", "x19", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28"]
CARRY_REG_REAL = "x11"

C_REGS = ['\C'+str(i) for i in range(len(C_REAL))]
C_ADR = '\\C_ADR'
T_REGS = ['\T'+str(i) for i in range(len(T_REAL))]
P_ADR = '\\P_ADR'
B_ADR = '\\B_ADR' 
AI = '\\AI'
CARRY_REG = '\\CARRY_REG'

def WRITE_MUL_LIMBSx1(f, limbs):

    batch_size = 4
    num_batches = int(limbs / batch_size)

    f.write('/*\n [C_ADR]+1 = [C_ADR] + [B_ADR] * AI   \n*/ \n')
    f.write('.macro %s, %s, %s, %s, %s, %s, %s \n' % (
                                        MULLIMBSx1, 
                                        AI.replace('\\',''),
                                        B_ADR.replace('\\',''),
                                        C_ADR.replace('\\',''),
                                        CARRY_REG.replace('\\',''), 
                                        ', '.join(C_REGS).replace('\\',''),
                                        ', '.join(T_REGS).replace('\\','')
                                        ))
    adds(f, CARRY_REG, 'xzr', 'xzr', 'CARRY_REG = 0')   
    for i in range(num_batches):
        newlines(f,1)
        comment(f, "LIMBS C%d-C%d" % (i*4, i*4+3))
        offset = i*16*2
        for j in range(2):
            ldp(f, T_REGS[j*2], T_REGS[2*j+1], B_ADR, offset + j*16, 'Load B')
            ldp(f, C_REGS[2*j], C_REGS[2*j+1], C_ADR, offset + j*16, 'Load C')
        newlines(f,1)
        for j in range(4):
            mul(f, T_REGS[8 + 2*j], T_REGS[j], AI)
            umulh(f, T_REGS[8 + 2*j + 1], T_REGS[j], AI)
        newlines(f,1)
        # The thing below should be packed into a loop 
        for j in range(4):
            if j == 0:
                adcs(f, C_REGS[j], C_REGS[j], CARRY_REG, 'add carry')
                adcs(f, CARRY_REG, 'xzr', 'xzr')            
                adcs(f, C_REGS[j], C_REGS[0], T_REGS[8], 'add C%d' % (i*4+j))
            else:
                adcs(f, C_REGS[j], C_REGS[j], CARRY_REG, 'add carry')
                adcs(f, CARRY_REG, 'xzr', 'xzr')
                adcs(f, C_REGS[j], C_REGS[j], T_REGS[8+2*j-1], 'add C%d' % (i*4+j))
                adcs(f, CARRY_REG, CARRY_REG, 'xzr')
                adcs(f, C_REGS[j], C_REGS[j], T_REGS[8+2*j], 'add T')
            newlines(f,1)
        adcs(f, CARRY_REG, CARRY_REG, T_REGS[15])
        stp(f, C_REGS[0], C_REGS[1], C_ADR, offset, 'Store C')
        stp(f, C_REGS[2], C_REGS[3], C_ADR, offset+16)
    comment(f,"Store last C at [C_ADR]+1, which means offset: %d" % (limbs*8))
    #load last c
    ldr(f, C_REGS[0], C_ADR, limbs*8)
    #add carry
    adcs(f, C_REGS[0], C_REGS[0], CARRY_REG, 'add carry')
    f.write('\tstr %s, [%s, #%d] \n' % (C_REGS[0], C_ADR, limbs*8))
    newlines(f,1)
    f.write('.endm \n\n')

def call_mul_limbsx1_macro(f, b_addr):
    f.write('\t%s %s, %s, %s, %s, %s, %s \n' % (MULLIMBSx1, 
                                                AI, 
                                                b_addr, 
                                                C_ADR, 
                                                CARRY_REG, 
                                                ', '.join(C_REGS), 
                                                ', '.join(T_REGS))
                                                )


MUL_STEP_MACRO = "MUL_STEP"
K = "\\K"
A_ADR = "\\A_ADR"
def WRITE_MUL_STEP(f, limbs):
    batch_size = 4
    num_batches = int(limbs / batch_size)
    f.write("/*\n C ← C + ai B \n q ← μC mod r\n C ← (C + Nq)/r  \n*/ \n")
    f.write('.macro %s, %s, %s, %s, %s, %s, %s, %s, %s, %s \n' % (
                                        MUL_STEP_MACRO, 
                                        K.replace('\\',''),
                                        A_ADR.replace('\\',''),
                                        B_ADR.replace('\\',''),
                                        C_ADR.replace('\\',''),
                                        P_ADR.replace('\\',''),
                                        AI.replace('\\',''),
                                        CARRY_REG.replace('\\',''), 
                                        ', '.join(C_REGS).replace('\\',''),
                                        ', '.join(T_REGS).replace('\\','')
                                        ))
    # LOAD AI from offset \\K
    f.write('\tldr %s, [%s ,%s] // load AI \n' % (AI, A_ADR, K))
    comment(f, "C ← C + ai B")
    call_mul_limbsx1_macro(f, B_ADR)
    comment(f, "q ← μC mod r , we just need to multiply C[0] with inv_min_p_mod_r")
    load_label_address_into_register(f, 'inv_min_p_mod_r', T_REGS[0])
    f.write('\tldr %s, [%s] // load inv_min_p_mod_r \n' % (T_REGS[0], T_REGS[0]))
    f.write('\tldr %s, [%s] // load C[0] \n' % (T_REGS[1], C_ADR))
    mul(f, AI, T_REGS[0], T_REGS[1], 'q ← μC mod r')
    comment(f, "C ← (C + Nq)/r")

    call_mul_limbsx1_macro(f, P_ADR)
    comment(f, "We shift C ")
    ldr(f, C_REGS[0], C_ADR, limbs*8)
    # make a loop that counts backwards from 8 to 0 
    
    # make for i in range(num_batches go backwards))
    for batch in range(num_batches): 
        offset = batch*batch_size*8
        ldp(f, T_REGS[0], T_REGS[1], C_ADR, offset)
        ldp(f, T_REGS[2], T_REGS[3], C_ADR, offset+16)

        if batch == 0:
            strr(f, T_REGS[1], C_ADR, offset)
        else:
            stp(f, T_REGS[0], T_REGS[1], C_ADR, offset-8)
        stp(f, T_REGS[2], T_REGS[3], C_ADR, offset+8)
    stp(f, C_REGS[0], 'xzr', C_ADR, (limbs-1)*8 ) 
    newlines(f,1)
    f.write('.endm \n\n')

def call_mul_step_macro(f, number_k):
    f.write('\t%s %s, %s, %s, %s, %s, %s, %s, %s, %s \n' % (MUL_STEP_MACRO, 
                                                            number_k, 
                                                            A_ADR_REAL, 
                                                            B_ADR_REAL, 
                                                            C_ADR_REAL, 
                                                            P_ADR_REAL, 
                                                            AI_REAL, 
                                                            CARRY_REG_REAL, 
                                                            ', '.join(C_REAL), 
                                                            ', '.join(T_REAL))
                                                            )


def add_inv_min_p(f, limbs):
    f.write('inv_min_p_mod_r: \n')
    if limbs == 16:
        f.write('\t.quad 0xd2c2c24160038025 \n')
    else:
        f.write('\t.quad 0x22249689c54c7495 \n')


def WRITE_FP_MUL(f, limbs):
    REGS_TO_STORE = ['lr', 'x0','x19', 'x20', 'x21', 'x22', 'x23', 'x24', 'x25', 'x26', 'x27', 'x28', 'x30']
    C_OFFSET = len(REGS_TO_STORE)*8 
    PLACE_FOR_C = limbs * 8 + 8
    comment(f, "A[x0] = A[x0] * B[x1] mod P \n directly into fp_mul3")
    introduce_global_function(f, 'fp_mul2')
    f.write('\tmov x2, x0\n') 
    comment(f, "Montgomery multiplication\n C[x0] = A[x1] * B[x2] mod P")
    introduce_global_function(f, 'fp_mul3')
    comment(f, "Increment mul/sq counter")
    load_label_address_into_register(f, 'fp_mulsq_count', 'x3')
    f.write('\tldr x4, [x3]\n')
    f.write('\tadd x4, x4, #1\n')
    f.write('\tstr x4, [x3]\n\n')

    sub_stack_and_store_on_stack(f, REGS_TO_STORE, PLACE_FOR_C) 
    newlines(f,1)
    comment(f, "Load adress of P, A and B and C into respective registers")
    load_label_address_into_register(f, extern_variables['uintbig_p'], P_ADR_REAL)
    add(f, C_ADR_REAL, 'sp', '#%d' % C_OFFSET)
    mov(f, A_ADR_REAL, 'x1')
    mov(f, B_ADR_REAL, 'x2')
    comment(f, "Init C to 0")
    for i in range(int(limbs/2)):
        offset = i*16
        stp(f, 'xzr', 'xzr', C_ADR_REAL, offset)
    f.write('\tstr xzr, [%s, #%d] // set C[17] to 0 \n' % (C_ADR_REAL, limbs*8)) 
    newlines(f,1)
    for i in range(limbs):
        call_mul_step_macro(f, '#'+str(i*8))
    newlines(f,1)

    batche_size = 4
    num_batches = int(limbs / batche_size)
    comment(f, "Store Result C to [x0] and the overflow into x1")
    
    for batch in range(num_batches):
        offset = batch*batche_size*8
        ldp(f, T_REAL[0], T_REAL[1], C_ADR_REAL, offset)
        ldp(f, T_REAL[2], T_REAL[3], C_ADR_REAL, offset+16)
        stp(f, T_REAL[0], T_REAL[1], 'x0', offset)
        stp(f, T_REAL[2], T_REAL[3], 'x0', offset+16)

    f.write('\tldr x1, [%s, #%d] // load the overflow limb into x1, reduce_once wants it that way \n' % (C_ADR_REAL, limbs*8))

    f.write('\tbl %s \n' % '_reduce_once')
    comment(f, "Restore Stack")
    add_stack_and_restore_regs_from_stack(f, REGS_TO_STORE, PLACE_FOR_C)
    f.write('\tret \n')

def WRITE_REDUCE_ONCE(f, limbs):
    introduce_global_function(f, '_reduce_once',
                              '[x0] = [x0]x1 - [p] mod [p] \n x1 = potential overflow')
    result_adr = 'x0'
    A_REGS = ['x3', 'x4', 'x5', 'x6']
    P_REGS = ['x7', 'x8', 'x9', 'x10']
    RESULT_REGS = ['x11', 'x12', 'x13', 'x14']
    P_ADR = 'x15'
    CARRY_REG = 'x1'
    xzr = 'xzr'
    load_label_address_into_register(f, extern_variables['uintbig_p'], P_ADR)

    batch_size = 4
    num_batches = int(limbs / batch_size)

    for i in range(num_batches):
        offset = i * batch_size * 8
        comment(f, "Limbs %s - %s" % (i*4, i*4+3))
        ldp(f, A_REGS[0], A_REGS[1], result_adr, offset, 'load A')
        ldp(f, A_REGS[2], A_REGS[3], result_adr, offset + 16, 'load A')
        ldp(f, P_REGS[0], P_REGS[1], P_ADR, offset, 'load P')
        ldp(f, P_REGS[2], P_REGS[3], P_ADR, offset + 16, 'load P')

        if i==0:
            subs(f, RESULT_REGS[0], A_REGS[0], P_REGS[0])
        else:
            sbcs(f, RESULT_REGS[0], A_REGS[0], P_REGS[0]) 
        
        sbcs(f, RESULT_REGS[1], A_REGS[1], P_REGS[1])
        sbcs(f, RESULT_REGS[2], A_REGS[2], P_REGS[2])
        sbcs(f, RESULT_REGS[3], A_REGS[3], P_REGS[3])
        stp(f, RESULT_REGS[0], RESULT_REGS[1], result_adr, offset, 'store result')
        stp(f, RESULT_REGS[2], RESULT_REGS[3], result_adr, offset + 16, 'store result')
    comment(f, "Final carry of a+b-p")
    sbcs(f, CARRY_REG, CARRY_REG, xzr, 'potential overflow of a+b')
    sbcs(f, CARRY_REG, xzr, xzr, 'if a-p negative, carry is 1')
    comment(f, "AND P and a + p")
    for i in range(num_batches):
        offset = i*batch_size * 8
        comment(f, 'Limbs %s - %s' % (i*4, i*4+3))
        ldp(f, A_REGS[0], A_REGS[1], result_adr, i*32, 'load A')
        ldp(f, A_REGS[2], A_REGS[3], result_adr, i*32 + 16, 'load A')
        ldp(f, P_REGS[0], P_REGS[1], P_ADR, i*32, 'load P')
        ldp(f, P_REGS[2], P_REGS[3], P_ADR, i*32 + 16, 'load P')
        for j in range(4):
            andd(f, P_REGS[j], P_REGS[j], CARRY_REG)
        newlines(f,1)
        if i==0:
            adds(f, RESULT_REGS[0], A_REGS[0], P_REGS[0])
        else:
            adcs(f, RESULT_REGS[0], A_REGS[0], P_REGS[0])
        adcs(f, RESULT_REGS[1], A_REGS[1], P_REGS[1])
        adcs(f, RESULT_REGS[2], A_REGS[2], P_REGS[2])
        adcs(f, RESULT_REGS[3], A_REGS[3], P_REGS[3])
        stp(f, RESULT_REGS[0], RESULT_REGS[1], result_adr, offset, 'store result')
        stp(f, RESULT_REGS[2], RESULT_REGS[3], result_adr, offset + 16, 'store result')
    f.write('\tret \n\n') 
    newlines(f,1)

fns = ['./arm64/p1024/mul/fp_mul_interleaved.s', './arm64/p2048/mul/fp_mul_interleaved.s']
limbs = 0
for fn in fns:
    limbs +=16
    with open(fn+'.tmp','w') as f:
        f.write('/* DO NOT EDIT! generated by autogen */\n\n')
        f.write('#include "../../../uintbig_namespace.h"\n')
        f.write('#include "../../../fp_namespace.h"\n')
        import_extern_variables(f)
        add_inv_min_p(f, limbs)
        maybeupdate(fn)
        f.write('.text\n')
        f.write('.align 4 \n\n')
        WRITE_MUL_LIMBSx1(f, limbs)
        WRITE_MUL_STEP(f, limbs)
        WRITE_FP_MUL(f, limbs)
        WRITE_REDUCE_ONCE(f, limbs)

        


