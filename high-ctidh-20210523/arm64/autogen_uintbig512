#!/usr/bin/env python3

import os
import math
import re
import sys
limbs = 8
sys.setrecursionlimit(10000)

def maybeupdate(fn):
  if os.access(fn,os.F_OK):
    with open(fn) as f:
      x = f.read()
    with open(fn+'.tmp') as f:
      y = f.read()
    if x == y:
      os.unlink(fn+'.tmp')
      return
  os.rename(fn+'.tmp',fn)

def comment(f, comment):
    f.write('/* %s */\n' % comment)

def init_data_var(f, name):
    f.write('.global %s\n' % name)
    f.write('%s: \n' % name)
    f.write('\t.quad 0\n')

def introduce_global_function(f, name):
    f.write('.global %s\n' % name)
    f.write('%s: \n' % name)


print("Generating uintbig512_arm64.S ...")

fn = "../uintbig512_arm64.S"
with open(fn+'.tmp','w') as f:
  f.write('/* DO NOT EDIT! generated by autogen */\n\n')
  f.write('#include "uintbig_namespace.h" \n')
  f.write('.data\n\n')

  introduce_global_function(f, "_uintbig_1")
  f.write('\t.quad 1, 0, 0, 0\n')
  f.write('\t.quad 0, 0, 0, 0\n\n')
  introduce_global_function(f, "_uintbig_p")
  f.write('\t.quad 0x1b81b90533c6c87b, 0xc2721bf457aca835, 0x516730cc1f0b4f25, 0xa7aac6c567f35507\n')
  f.write('\t.quad 0x5afbfcc69322c9cd, 0xb42d083aedc88c42, 0xfc8ab0d15e3e4c4a, 0x65b48e8f740f89bf\n\n')

  introduce_global_function(f, "_uintbig_four_sqrt_p")
  f.write('\t.quad 0x17895e71e1a20b3f, 0x38d0cd95f8636a56, 0x142b9541e59682cd, 0x856f1399d91d6592\n')
  f.write('\t.quad 2, 0, 0, 0\n\n')

  f.write('.text\n')
  f.write('.align 4\n\n')

  ## _UINTBIG_SET ______________________________________________________________________________________________
  comment(f, "A[x0][0] = x1, rest 0")
  introduce_global_function(f, "_uintbig_set")
  f.write('\str x1, [x0]\n')
  f.write('mov x2, 0\n')
  f.write('stp x1, x2, [x0, #0]\t')
  
  for i in range(1, int(limbs/2)):
    offset = i*16
    f.write('stp x2, x2, [x0, #%d]\t' % offset)
  f.write('\ret\n\n')



  maybeupdate(fn)
