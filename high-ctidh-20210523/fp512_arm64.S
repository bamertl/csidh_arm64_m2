/* DO NOT EDIT! generated by autogen */

#include "uintbig_namespace.h"
#include "fp_namespace.h"
.extern _uintbig_p
.extern _uintbig_mul3_64
.extern _uintbig_mul3_64_full


.set pbits,511 
.set pbytes,64 
.set plimbs,8 

_inv_min_p_mod_r: 
	.quad 0x66c1301f632e294d

.global _fp_0
_fp_0: 
	.zero 64
.global _fp_1
_fp_1: 
	.quad 0xc8fc8df598726f0a, 0x7b1bc81750a6af95, 0x5d319e67c1e961b4, 0xb0aa7275301955f1
	.quad 0x4a080672d9ba6c64, 0x97a5ef8a246ee77b, 0x06ea9e5d4383676a, 0x3496e2e117e0ec80

.global _fp_2
_fp_2: 
	.quad 0x767762e5fd1e1599, 0x33c5743a49a0b6f6, 0x68fc0c0364c77443, 0xb9aa1e24f83f56db
	.quad 0x3914101f20520efb, 0x7b1ed6d95b1542b4, 0x114a8be928c8828a, 0x03793732bbb24f40

_r_squared_mod_p:
	.quad 0x36905b572ffc1724, 0x67086f4525f1f27d, 0x4faf3fbfd22370ca, 0x192ea214bcc584b1
	.quad 0x5dae03ee2f5de3d0, 0x1e9248731776b371, 0xad5f166e20e4f52d, 0x4ed759aea6f3917e

.data
.global _fp_mulsq_count
_fp_mulsq_count: 
	.quad 0
.global _fp_sq_count
_fp_sq_count: 
	.quad 0
.global _fp_addsub_count
_fp_addsub_count: 
	.quad 0

.text
.align 4
/* this means 16 byte alignment */

/* x1 = x0  x0 is being copied to x1(8 words) */
.global _fp_copy
_fp_copy: 
	ldp x2, x3, [x1, #0]
	stp x2, x3, [x0, #0]
	ldp x2, x3, [x1, #16]
	stp x2, x3, [x0, #16]
	ldp x2, x3, [x1, #32]
	stp x2, x3, [x0, #32]
	ldp x2, x3, [x1, #48]
	stp x2, x3, [x0, #48]
	ret

/* A[x0] = B[x1] if d[x2], we make it time-constant */
.global _fp_cmov
_fp_cmov: 
/* Loop 4 times through the 8 words */
/* (AxorB)^d xor A = A */
/* LOOP 0 */
	ldp x3, x4, [x1, #0]
	ldp x5, x6, [x0, #0]
	eor x3, x3, x5
	eor x4, x4, x6
	eor x3, x3, x2
	eor x4, x4, x2
	eor x3, x3, x5
	eor x4, x4, x6
	stp x3, x4, [x0, #0]
/* LOOP 1 */
	ldp x3, x4, [x1, #16]
	ldp x5, x6, [x0, #16]
	eor x3, x3, x5
	eor x4, x4, x6
	eor x3, x3, x2
	eor x4, x4, x2
	eor x3, x3, x5
	eor x4, x4, x6
	stp x3, x4, [x0, #16]
/* LOOP 2 */
	ldp x3, x4, [x1, #32]
	ldp x5, x6, [x0, #32]
	eor x3, x3, x5
	eor x4, x4, x6
	eor x3, x3, x2
	eor x4, x4, x2
	eor x3, x3, x5
	eor x4, x4, x6
	stp x3, x4, [x0, #32]
/* LOOP 3 */
	ldp x3, x4, [x1, #48]
	ldp x5, x6, [x0, #48]
	eor x3, x3, x5
	eor x4, x4, x6
	eor x3, x3, x2
	eor x4, x4, x2
	eor x3, x3, x5
	eor x4, x4, x6
	stp x3, x4, [x0, #48]
	ret

/* A[x0] <-> B[x1] if d[x2], we make it time-constant */
.global _fp_cswap
_fp_cswap: 
/* LOOP 0 */
	ldp x3, x4, [x0, #0]
	ldp x5, x6, [x1, #0]
	eor x7, x3, x5
	eor x8, x4, x6
	eor x7, x7, x2
	eor x8, x8, x2
	eor x3, x7, x3
	eor x4, x8, x4
	eor x5, x7, x5
	eor x6, x8, x6
	stp x3, x4, [x0, #0]
	stp x5, x6, [x1, #0]
/* LOOP 1 */
	ldp x3, x4, [x0, #16]
	ldp x5, x6, [x1, #16]
	eor x7, x3, x5
	eor x8, x4, x6
	eor x7, x7, x2
	eor x8, x8, x2
	eor x3, x7, x3
	eor x4, x8, x4
	eor x5, x7, x5
	eor x6, x8, x6
	stp x3, x4, [x0, #16]
	stp x5, x6, [x1, #16]
/* LOOP 2 */
	ldp x3, x4, [x0, #32]
	ldp x5, x6, [x1, #32]
	eor x7, x3, x5
	eor x8, x4, x6
	eor x7, x7, x2
	eor x8, x8, x2
	eor x3, x7, x3
	eor x4, x8, x4
	eor x5, x7, x5
	eor x6, x8, x6
	stp x3, x4, [x0, #32]
	stp x5, x6, [x1, #32]
/* LOOP 3 */
	ldp x3, x4, [x0, #48]
	ldp x5, x6, [x1, #48]
	eor x7, x3, x5
	eor x8, x4, x6
	eor x7, x7, x2
	eor x8, x8, x2
	eor x3, x7, x3
	eor x4, x8, x4
	eor x5, x7, x5
	eor x6, x8, x6
	stp x3, x4, [x0, #48]
	stp x5, x6, [x1, #48]
	ret

/* A[x0] = A[x0] + B[x1] */
.global _fp_add2
_fp_add2: 
\mov x0, x2/* A[x0] = A[x0] + B[x1] + C[x2] */
.global _fp_add3
_fp_add3: 
/* Increment add/sub counter */
	adrp x3, _fp_addsub_count @PAGE
	add x3, x3, _fp_addsub_count@PAGEOFF
	ldr x4, [x3]
	add x4, x4, #1
	str x4, [x3]

/* LOAD A */
	sub sp, sp, #16
	str x19, x20, x21, [sp, #0]
/* load A and B */
	ldp x3, x4, [x0, #0]
	ldp x11, x12, [x1, #0]
	ldp x5, x6, [x0, #16]
	ldp x13, x14, [x1, #16]
	ldp x7, x8, [x0, #32]
	ldp x15, x16, [x1, #32]
	ldp x9, x10, [x0, #48]
	ldp x17, x19, [x1, #48]
/* A + B */
	ADDS x3, x3, x11
	ADCS x4, x4, x12
	ADCS x5, x5, x13
	ADCS x6, x6, x14
	ADCS x7, x7, x15
	ADCS x8, x8, x16
	ADCS x9, x9, x17
	ADCS x10, x10, x19
	ADCS x11, xzr, xzr
/* LOAD P */
	ldp x12, x13, [x21, #0]
	ldp x14, x15, [x21, #16]
	ldp x16, x17, [x21, #32]
	ldp x19, x20, [x21, #48]
/* A + B - P */
	SUBS x3, x3, x12
	SBCS x4, x4, x13
	SBCS x5, x5, x14
	SBCS x6, x6, x15
	SBCS x7, x7, x16
	SBCS x8, x8, x17
	SBCS x9, x9, x19
	SBCS x10, x10, x20
	SBCS x11, x11, xzr
	SBCS x21, xzr, xzr
/* Carry into x21 */
/* MASK P with carry */
	AND x12, x12, x21
	AND x13, x13, x21
	AND x14, x14, x21
	AND x15, x15, x21
	AND x16, x16, x21
	AND x17, x17, x21
	AND x19, x19, x21
	AND x20, x20, x21
/* A + B - P + P */
	ADDS x3, x3, x12
	ADCS x4, x4, x13
	ADCS x5, x5, x14
	ADCS x6, x6, x15
	ADCS x7, x7, x16
	ADCS x8, x8, x17
	ADCS x9, x9, x19
	ADCS x10, x10, x20
/* STORE RESULT */
	stp x3, x4, [x0, #0]
	stp x5, x6, [x0, #16]
	stp x7, x8, [x0, #32]
	stp x9, x10, [x0, #48]
	ldr x19, x20, x21, [sp, #0]
	add sp, sp, #16
	ret

/* A[x0] = A[x0] - B[x1] */
.global _fp_sub2
_fp_sub2: 
	mov x2, x1	mov x1, x0	sub sp, sp, #96
	stp lr, x19, [sp, #0]
	stp x20, x21, [sp, #16]
/* A[x0] = A[x0] - B[x1] - C[x2] */
.global _fp_sub3
_fp_sub3: 
/* Increment add/sub counter */
	adrp x3, _fp_addsub_count @PAGE
	add x3, x3, _fp_addsub_count@PAGEOFF
	ldr x4, [x3]
	add x4, x4, #1
	str x4, [x3]

	mov x19, x0	mov x20, x1/* stack + 32 = -x2 */
	mov x1, x2
	add x0, sp, #32
	bl _minus_number
	mov x2, x0
	mov x0, x19
	mov x1, x20
	bl _fp_add3
	ldp lr, x19, [sp, #0]
	ldp x20, x21, [sp, #16]
	add sp, sp, #96
	ret

/* x0 = -x1 */
_minus_number: 
	sub sp, sp, #16
	stp x19, x20, [sp, #0]
/* LOAD A and P */
	adrp x2, _uintbig_p @PAGE
	add x2, x2, _uintbig_p@PAGEOFF
	ldp x3, x4, [x1, #0]
	ldp x5, x6, [x1, #16]
	ldp x7, x8, [x1, #32]
	ldp x9, x10, [x1, #48]
	ldp x11, x12, [x2, #0]
	ldp x13, x14, [x2, #16]
	ldp x15, x16, [x2, #32]
	ldp x17, x19, [x2, #48]
/* P - A */
	subs x3, x11, x3
	sbcs x4, x12, x4
	sbcs x5, x13, x5
	sbcs x6, x14, x6
	sbcs x7, x15, x7
	sbcs x8, x16, x8
	sbcs x9, x17, x9
	sbcs x10, x19, x10
/* check if a = 0 by orr x3-x10  */
	orr x20, x3, x4
	orr x20, x20, x4
	orr x20, x20, x5
	orr x20, x20, x6
	orr x20, x20, x7
	orr x20, x20, x8
	orr x20, x20, x9
	orr x20, x20, x10
	cmp x20, #0
	cset x20, eq
	lsl x20, x20, #63
	asr x20, x20, #63
/* and the prime (if a was 0 then we and with 1, otherwise 0) */
	and x11, x11, x20
	and x12, x12, x20
	and x13, x13, x20
	and x14, x14, x20
	and x15, x15, x20
	and x16, x16, x20
	and x17, x17, x20
	and x19, x19, x20
/* subtract the prime from the result (this should only happen if result = prime) */
	subs x3, x3, x11
	sbcs x4, x4, x12
	sbcs x5, x5, x13
	sbcs x6, x6, x14
	sbcs x7, x7, x15
	sbcs x8, x8, x16
	sbcs x9, x9, x17
	sbcs x10, x10, x19
	stp x3, x4, [x0, #0]
	stp x5, x6, [x0, #16]
	stp x7, x8, [x0, #32]
	stp x9, x10, [x0, #48]
	ldp x19, x20, [sp, #0]
	add sp, sp, #16
	ret

	sub sp, sp, #32
	stp x19, x20, [sp, #0]
	stp x21, x22, [sp, #16]
/* LOAD A and B */
	ldp x2, x3, [x0, #0]
	ldp x4, x5, [x0, #16]
	ldp x6, x7, [x0, #32]
	ldp x8, x9, [x0, #48]
tldr x10, [x0, #64]
	ldp x11, x12, [x1, #0]
	ldp x13, x14, [x1, #16]
	ldp x15, x16, [x1, #32]
	ldp x17, x19, [x1, #48]
	ldr x20, [x1, #64]
/* A + B */
	ADDS x2, x2, x11
	ADCS x3, x3, x12
	ADCS x4, x4, x13
	ADCS x5, x5, x14
	ADCS x6, x6, x15
	ADCS x7, x7, x16
	ADCS x8, x8, x17
	ADCS x9, x9, x19
	stp x2, x3, [x0, #0]
	stp x4, x5, [x0, #16]
	stp x6, x7, [x0, #32]
	stp x8, x9, [x0, #48]
	str x10, [x0, #64]
	ldp x19, x20, [sp, #0]
	ldp x21, x22, [sp, #16]
	add sp, sp, #32
	ret

