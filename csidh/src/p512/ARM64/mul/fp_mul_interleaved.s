/* DO EDIT, ADD CUSTOM MUL COUNTER! generated by autogen */

.align 4

.data

inv_min_p_mod_r: 
	.quad 0x66c1301f632e294d
big_p: 
	.quad 0x1b81b90533c6c87b, 0xc2721bf457aca835, 0x516730cc1f0b4f25, 0xa7aac6c567f35507
	.quad 0x5afbfcc69322c9cd, 0xb42d083aedc88c42, 0xfc8ab0d15e3e4c4a, 0x65b48e8f740f89bf

.text
.align 4

.macro mul_8x1, AI, C0, C1, C2, C3, C4, C5, C6, C7, C8, B0, B1, B2, B3, B4, B5, B6, B7, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, CARRY_REG 
	/* ai * B first 5 limbs */
	mul \T0, \AI, \B0  
	umulh \T1, \AI, \B0  
	mul \T2, \AI, \B1  
	umulh \T3, \AI, \B1  
	mul \T4, \AI, \B2  
	umulh \T5, \AI, \B2  
	mul \T6, \AI, \B3  
	umulh \T7, \AI, \B3  
	mul \T8, \AI, \B4  
	umulh \T9, \AI, \B4  

	adds \C0, \C0, \T0  // mul C0 
	adcs \C1, \C1, \T1  // umul C1 
	adcs \CARRY_REG, xzr, xzr  
	adcs \C1, \C1, \T2  // mul C1 
	adcs \C2, \C2, \CARRY_REG  // add carry to next limb C2 

	adcs \CARRY_REG, xzr, xzr  // init new carry leg for C3 
	adcs \C2, \C2, \T3  // umul C2 
	adcs \CARRY_REG, \CARRY_REG, xzr  
	adcs \C2, \C2, \T4  // mul C2 
	adcs \C3, \C3, \CARRY_REG  // add carry to next limb C3 

	adcs \CARRY_REG, xzr, xzr  // init new carry leg for C4 
	adcs \C3, \C3, \T5  // umul C3 
	adcs \CARRY_REG, \CARRY_REG, xzr  
	adcs \C3, \C3, \T6  // mul C3 
	adcs \C4, \C4, \CARRY_REG  // add carry to next limb C4 

	adcs \CARRY_REG, xzr, xzr  // init new carry leg for C5 
	adcs \C4, \C4, \T7  // umul C4 
	adcs \CARRY_REG, \CARRY_REG, xzr  
	adcs \C4, \C4, \T8  // mul C4 
	adcs \C5, \C5, \CARRY_REG  // add carry to next limb C5 

	adcs \CARRY_REG, xzr, xzr  // init carry reg for C6 
	adcs \C5, \C5, \T9  // umul C5 
	adcs \CARRY_REG, \CARRY_REG, xzr  

	/* Mul seconds half of B with ai add to c ['\\B5', '\\B6', '\\B7'] */
	mul \T0, \AI, \B5  
	umulh \T1, \AI, \B5  
	mul \T2, \AI, \B6  
	umulh \T3, \AI, \B6  
	mul \T4, \AI, \B7  
	umulh \T5, \AI, \B7  
	/* Again add to C ['\\C5', '\\C6', '\\C7', '\\C8'] with carry reg \CARRY_REG */

	adcs \C5, \T0, \C5  // mul C5 
	adcs \CARRY_REG, \CARRY_REG, xzr  
	adcs \C6, \C6, \CARRY_REG  // add carry to next limb C6 
	adcs \CARRY_REG, xzr, xzr  // init carry reg for C7 
	adcs \C6, \C6, \T1  // umul C6 
	adcs \CARRY_REG, \CARRY_REG, xzr  

	adcs \C6, \T2, \C6  // mul C6 
	adcs \CARRY_REG, \CARRY_REG, xzr  
	adcs \C7, \C7, \CARRY_REG  // add carry to next limb C7 
	adcs \CARRY_REG, xzr, xzr  // init carry reg for C8 
	adcs \C7, \C7, \T3  // umul C7 
	adcs \CARRY_REG, \CARRY_REG, xzr  

	adcs \C7, \T4, \C7  // mul C7 
	adcs \CARRY_REG, \CARRY_REG, xzr  
	adcs \C8, \C8, \CARRY_REG  // add carry to next limb C8 
	adcs \CARRY_REG, xzr, xzr  // init carry reg for C9 
	adcs \C8, \C8, \T5  // umul C8 
	adcs \CARRY_REG, \CARRY_REG, xzr  

.endm 
	/* mul step */
.macro mul_step, K, C0, C1, C2, C3, C4, C5, C6, C7, C8, B0, B1, B2, B3, B4, B5, B6, B7, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11 

	ldr \T0, [sp, #16]  // load B addr pointer 
	ldp \B0, \B1, [\T0, #0]  // load B 
	ldp \B2, \B3, [\T0, #16]  // load B 
	ldp \B4, \B5, [\T0, #32]  // load B 
	ldp \B6, \B7, [\T0, #48]  // load B 

	ldr \T1, [sp, #8]  // load A addr pointer 
	ldr \T11, [\T1 , 8*\K] // load AI 

	/* C ← C + ai B */
	mul_8x1 \T11, \C0, \C1, \C2, \C3, \C4, \C5, \C6, \C7, \C8, \B0, \B1, \B2, \B3, \B4, \B5, \B6, \B7, \T0, \T1, \T2, \T3, \T4, \T5, \T6, \T7, \T8, \T9, \T10
	/* q ← mu * C mod r */
	adrp \T11, inv_min_p_mod_r@PAGE
	add \T11, \T11, inv_min_p_mod_r@PAGEOFF
	ldr \T11, [\T11, #0]  // load inv_min_p_mod_r 
	mul \T11, \T11, \C0  // mul C0 with inv_min_p_mod_r = q 

	/* C ← C + q p */
	adrp \T0, big_p@PAGE
	add \T0, \T0, big_p@PAGEOFF
	ldp \B0, \B1, [\T0, #0]  // load B 
	ldp \B2, \B3, [\T0, #16]  // load B 
	ldp \B4, \B5, [\T0, #32]  // load B 
	ldp \B6, \B7, [\T0, #48]  // load B 

	mul_8x1 \T11, \C0, \C1, \C2, \C3, \C4, \C5, \C6, \C7, \C8, \B0, \B1, \B2, \B3, \B4, \B5, \B6, \B7, \T0, \T1, \T2, \T3, \T4, \T5, \T6, \T7, \T8, \T9, \T10
	/* C <- C / r */
	mov \C0, \C1  // move C1 to C0 
	mov \C1, \C2  // move C2 to C1 
	mov \C2, \C3  // move C3 to C2 
	mov \C3, \C4  // move C4 to C3 
	mov \C4, \C5  // move C5 to C4 
	mov \C5, \C6  // move C6 to C5 
	mov \C6, \C7  // move C7 to C6 
	mov \C7, \C8  // move C8 to C7 
	eor \C8, \C8, \C8

.endm 
.global _fp_mul3
_fp_mul3: 
	/* todo add your custom mul counter here */
	/* save variables on stack */
	sub sp, sp, #112
	stp x0, x1, [sp, #0]
	stp x2, x19, [sp, #16]
	stp x20, x21, [sp, #32]
	stp x22, x23, [sp, #48]
	stp x24, x25, [sp, #64]
	stp x26, x27, [sp, #80]
	stp x28, x30, [sp, #96]

	/* set C to 0 */
	eor x21, x21, x21
	eor x22, x22, x22
	eor x23, x23, x23
	eor x24, x24, x24
	eor x25, x25, x25
	eor x26, x26, x26
	eor x27, x27, x27
	eor x28, x28, x28
	eor x30, x30, x30

	mul_step 0, x21, x22, x23, x24, x25, x26, x27, x28, x30, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x19, x20 
	mul_step 1, x21, x22, x23, x24, x25, x26, x27, x28, x30, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x19, x20 
	mul_step 2, x21, x22, x23, x24, x25, x26, x27, x28, x30, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x19, x20 
	mul_step 3, x21, x22, x23, x24, x25, x26, x27, x28, x30, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x19, x20 
	mul_step 4, x21, x22, x23, x24, x25, x26, x27, x28, x30, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x19, x20 
	mul_step 5, x21, x22, x23, x24, x25, x26, x27, x28, x30, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x19, x20 
	mul_step 6, x21, x22, x23, x24, x25, x26, x27, x28, x30, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x19, x20 
	mul_step 7, x21, x22, x23, x24, x25, x26, x27, x28, x30, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x19, x20 

	adrp x8, big_p@PAGE
	add x8, x8, big_p@PAGEOFF
	ldp x0, x1, [x8, #0]  // load P 
	ldp x2, x3, [x8, #16]  // load P 
	ldp x4, x5, [x8, #32]  // load P 
	ldp x6, x7, [x8, #48]  // load P 

	subs x21, x21, x0  // sub C0 with P0 
	sbcs x22, x22, x1  // sub C1 with P1 
	sbcs x23, x23, x2  // sub C2 with P2 
	sbcs x24, x24, x3  // sub C3 with P3 
	sbcs x25, x25, x4  // sub C4 with P4 
	sbcs x26, x26, x5  // sub C5 with P5 
	sbcs x27, x27, x6  // sub C6 with P6 
	sbcs x28, x28, x7  // sub C7 with P7 
	sbcs x8, xzr, xzr  // carry into temp0 

	and x0, x0, x8  // and P0 with temp0 
	and x1, x1, x8  // and P1 with temp0 
	and x2, x2, x8  // and P2 with temp0 
	and x3, x3, x8  // and P3 with temp0 
	and x4, x4, x8  // and P4 with temp0 
	and x5, x5, x8  // and P5 with temp0 
	and x6, x6, x8  // and P6 with temp0 
	and x7, x7, x8  // and P7 with temp0 
	ldr x9, [sp, #0]  // load dest addr pointer 

	adds x21, x21, x0  // add C0 with P0 
	adcs x22, x22, x1  // add C1 with P1 
	stp x21, x22, [x9, #0]  // store C0 and C1 
	adcs x23, x23, x2  // add C2 with P2 
	adcs x24, x24, x3  // add C3 with P3 
	stp x23, x24, [x9, #16]  // store C2 and C3 
	adcs x25, x25, x4  // add C4 with P4 
	adcs x26, x26, x5  // add C5 with P5 
	stp x25, x26, [x9, #32]  // store C4 and C5 
	adcs x27, x27, x6  // add C6 with P6 
	adcs x28, x28, x7  // add C7 with P7 
	stp x27, x28, [x9, #48]  // store C6 and C7 
	/* restore stack */
	ldp x0, x1, [sp, #0]
	ldp x2, x19, [sp, #16]
	ldp x20, x21, [sp, #32]
	ldp x22, x23, [sp, #48]
	ldp x24, x25, [sp, #64]
	ldp x26, x27, [sp, #80]
	ldp x28, x30, [sp, #96]
	add sp, sp, #112
	ret

